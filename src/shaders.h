#pragma once

namespace Artifex::RAW
{
    const char* vertex = "#version 300 es\n"
        "\n"
        "layout(location = 0) in vec2 aPos;\n"
        "layout(location = 1) in vec2 aTexCoord;\n"
        "\n"
        "out struct {\n"
        "    vec2 TexCoord;// Texture Coordinates\n"
        "\n"
        "    vec2 localPos;// Local Pos (in rect)\n"
        "    vec2 globalPos;// Global Pos (on screen)\n"
        "\n"
        "    vec2 center;// Center\n"
        "    vec2 size;// Size\n"
        "} io;\n"
        "\n"
        "uniform struct {\n"
        "    vec2 center;\n"
        "    vec2 size;\n"
        "    float rotation;\n"
        "\n"
        "    float ratio;\n"
        "} v;\n"
        "\n"
        "void main() {\n"
        "    vec2 point = v.size * aPos;\n"
        "\n"
        "    io.localPos = aPos;\n"
        "    io.globalPos = point + v.center;\n"
        "\n"
        "    vec2 pos = v.center;\n"
        "    pos.x += sin(v.rotation) * (point.x) - cos(v.rotation) * (point.y);\n"
        "    pos.y += cos(v.rotation) * (point.x) + sin(v.rotation) * (point.y);\n"
        "    pos.y *= v.ratio;\n"
        "\n"
        "    io.center = v.center;\n"
        "    io.size = v.size;\n"
        "\n"
        "    io.TexCoord = aTexCoord;\n"
        "\n"
        "    gl_Position = vec4(pos.xy, 0.0, 1.0);\n"
        "}";

    const char* fragment = "#version 300 es\n"
        "precision mediump float;\n"
        "out vec4 FragColor;\n"
        "\n"
        "in struct {\n"
        "    vec2 TexCoord;\n"
        "\n"
        "    vec2 localPos;\n"
        "    vec2 globalPos;\n"
        "\n"
        "    vec2 center;\n"
        "    vec2 size;\n"
        "} io;\n"
        "\n"
        "uniform struct {\n"
        "    int look;\n"
        "\n"
        "    sampler2D tex;\n"
        "    vec3 color;\n"
        "\n"
        "    vec4 corner;// topleft, topright, bottomleft, bottomright\n"
        "\n"
        "    float time;\n"
        "} f;\n"
        "\n"
        "// from https://iquilezles.org/articles/distfunctions\n"
        "float roundedBoxSDF(vec2 center, vec2 size, float radius) {\n"
        "    return length(max(abs(center) - size + radius, 0.0)) - radius;\n"
        "}\n"
        "\n"
        "void main() {\n"
        "    float corner = 0.0;\n"
        "    if (io.localPos.x < 0.0) {\n"
        "        if (io.localPos.y < 0.0)\n"
        "        corner = f.corner.x;\n"
        "        if (io.localPos.y > 0.0)\n"
        "        corner = f.corner.y;\n"
        "    } else if (io.localPos.x > 0.0) {\n"
        "        if (io.localPos.y < 0.0)\n"
        "        corner = f.corner.z;\n"
        "        if (io.localPos.y > 0.0)\n"
        "        corner = f.corner.w;\n"
        "    }\n"
        "\n"
        "    float radius = clamp(corner, 0.0, 1.0) * min(io.size.x, io.size.y);\n"
        "\n"
        "    float distance =\n"
        "    roundedBoxSDF(io.globalPos - io.center, io.size, radius);\n"
        "\n"
        "    float smoothedAlpha = 1.0 - smoothstep(0.0, 0.003, distance);\n"
        "\n"
        "    vec3 color;\n"
        "    switch (f.look) {\n"
        "        default :\n"
        "        case 0:\n"
        "        // TODO: customizability\n"
        "        color = 0.5 + 0.5 * cos(f.time + io.globalPos.xyx + vec3(0.0, 2.0, 4.0));\n"
        "        break;\n"
        "\n"
        "        case 1:\n"
        "        // Custom Color\n"
        "        color = f.color;\n"
        "        break;\n"
        "\n"
        "        case 2:\n"
        "        // Texture\n"
        "        color = texture(f.tex, io.TexCoord).rgb;\n"
        "        break;\n"
        "\n"
        "        // case 3:\n"
        "        // // Text\n"
        "        // color = texture(f.tex, io.TexCoord).r;\n"
        "        // break;\n"
        "    }\n"
        "\n"
        "    FragColor = vec4(color, smoothedAlpha);\n"
        "}";
}
